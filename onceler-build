#!/usr/bin/python3
#
# The Once-ler
# MIT License (c) 2021 Cappy Ishihara and the Ultramarine Linux Release engineering team
#
# This program runs on top of Lorax, an image creation tool.
# It is intended to simplify the creation of Fedora-based images.
#
# Kickstart is still required to be able to create the ISO image.
#
import argparse
import configparser
import os
import sys
import onceler.lorax as lorax
import typer
import click_spinner
# commandline arguments
import pylorax.installer

# find file in current directory named onceler.cfg

app = typer.Typer()


# parse the onceler.cfg file
parser = configparser.ConfigParser()
config = parser.read('onceler.cfg')




@app.command()
def onceler(variant=None):
    """
    Build an image from a set of kickstart files and a onceler.cfg file.
    """
    # if onceler.cfg is not found, exit
    if not config:
        print("onceler.cfg not found.")
        sys.exit(1)

    if variant is None:
        # build everything
        for section in parser.sections():
            if section.startswith('variant-'):
                print(f'Section: {section}')
                # check the variant type
                variant_type = parser.get(section, 'type')
                with click_spinner.spinner():
                    try:
                        compose = build(variant_type, section.split('-')[1])
                    except Exception as e:
                        print(f'Error: {e}')
                        sys.exit(1)
                    finally:
                        typer.echo(f'{section} built.')
                        typer.echo(f'Output: {compose}')

    else:
        # build the variant
        variant_type = parser.get(f'variant-{variant}', 'type')
        with click_spinner.spinner():
            try:
                compose = build(variant_type, variant)
            except Exception as e:
                typer.echo(f'{e}')
                sys.exit(1)
            finally:
                typer.echo(f'{variant} built.')
                typer.echo(f'Output: {compose}')


def build(type,variant):
    if type == 'iso':
        # build iso
        lorax.build_iso(
            variant=variant,
            product=parser.get('compose', 'project'),
            bugurl=parser.get('compose', 'bugurl'),
            version=parser.get('compose', 'releasever'),
            final=parser.get('compose', 'final'),
            ks=parser.get(f'variant-{variant}', 'kickstart'),
        )
if __name__ == "__main__":
    typer.run(onceler)