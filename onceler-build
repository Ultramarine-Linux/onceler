#!/usr/bin/python3
#
# The Once-ler
# MIT License (c) 2021 Cappy Ishihara and the Ultramarine Linux Release engineering team
#
# This program runs on top of Lorax, an image creation tool.
# It is intended to simplify the creation of Fedora-based images.
#
# Kickstart is still required to be able to create the ISO image.
#
import argparse
import configparser
import os
import sys
import onceler.lorax as lorax
import typer
import click_spinner
# commandline arguments
import pylorax.installer
# find file in current directory named onceler.cfg
import subprocess
import time
app = typer.Typer()


# parse the onceler.cfg file
parser = configparser.ConfigParser()
config = parser.read('onceler.cfg')


@app.command()
def onceler(variant: str = typer.Option(None, help='The variant to build.')):
    """
    Build an image from a set of kickstart files and a onceler.cfg file.
    """
    # if onceler.cfg is not found, exit
    if not config:
        print("onceler.cfg not found.")
        sys.exit(1)

    # create .tmp/ if it doesn't exist
    if not os.path.exists('.tmp'):
        os.makedirs('.tmp')


    if variant is None:
        # exit if no variant is given
        print("No variant given.")
        sys.exit(1)

    else:
        # check if the variant exists
        if not parser.has_section(f'variant-{variant}'):
            print(f'{variant} does not exist.')
            sys.exit(1)
        # check if the file in the variant exist
        # build the variant
        variant_type = parser.get(f'variant-{variant}', 'type')
        variantData = dict(parser[f'variant-{variant}'])
        # run build function as a subprocess
        build(variant_type,variantData,variant)
        # run the logger thread

    # delete the .tmp directory if it exists, recursively
    if os.path.exists('.tmp'):
        pass
        #os.system('rm -rf .tmp')


# funtions to actually build the image
# i know its ugly, but it works
def build(type,variant_data,variant):
    if type == 'iso':
        # build iso
        # run the build_iso and capture the output to not interfere with spinner
        # but don't make it interfere with the spinner
        typer.echo(lorax.build_iso(
            variant=variant_data,
            variant_name=variant,
            compose = dict(parser['compose']),
        ))
        return
    if type == 'lorax':
        # build lorax
        typer.echo('Composing install tree...')
        typer.echo(lorax.build_lorax(
            variant=variant_data,
            variant_name=variant,
            compose = dict(parser['compose']),
        ))
    else:
        print(f'{type} is not a valid type or is not supported.')
        sys.exit(1)
# still not everything but whatever this is getting really ugly
# at least im not yanderedev

if __name__ == "__main__":
    typer.run(onceler)



