#!/usr/bin/python3
#
# The Once-ler
# MIT License (c) 2021 Cappy Ishihara and the Ultramarine Linux Release engineering team
#
# This program runs on top of Lorax, an image creation tool.
# It is intended to simplify the creation of Fedora-based images.
#
# Kickstart is still required to be able to create the ISO image.
#
import argparse
import configparser
import os
import sys
import onceler.lorax as lorax
import typer
import click_spinner
# commandline arguments
import pylorax.installer

# find file in current directory named onceler.cfg

app = typer.Typer()


# parse the onceler.cfg file
parser = configparser.ConfigParser()
config = parser.read('onceler.cfg')




@app.command()
def onceler(variant=None):
    """
    Build an image from a set of kickstart files and a onceler.cfg file.
    """
    # if onceler.cfg is not found, exit
    if not config:
        print("onceler.cfg not found.")
        sys.exit(1)

    # create .tmp/ if it doesn't exist
    if not os.path.exists('.tmp'):
        os.makedirs('.tmp')


    if variant is None:
        # build everything
        for section in parser.sections():
            if section.startswith('variant-'):
                print(f'Section: {section}')
                # check the variant type
                variant_type = parser.get(section, 'type')
                with click_spinner.spinner():
                    try:
                        variantData = dict(parser[f'variant-{variant}'])
                        build(variant=variant, variant_data=variantData, type=variant_type)
                    except Exception as e:
                        print(f'Error: {e}')
                        sys.exit(1)
                    finally:
                        typer.echo(f'{section} built.')


    else:
        # build the variant
        variant_type = parser.get(f'variant-{variant}', 'type')
        with click_spinner.spinner():
            # print the section as a dict
            variantData = dict(parser[f'variant-{variant}'])
            build(variant=variant, variant_data=variantData,type=variant_type) # help i cant read the code

    # delete the .tmp directory if it exists, recursively
    if os.path.exists('.tmp'):
        pass
        #os.system('rm -rf .tmp')

def build(type,variant_data,variant):
    if type == 'iso':
        # build iso
        lorax.build_iso(
            variant=variant_data,
            variant_name=variant,
            compose = dict(parser['compose']),
        )

if __name__ == "__main__":
    typer.run(onceler)